* For whom?
  + projects with fully modular achitecture.
  + small to medium-sized projects. 
  + projects with minimal dependencies.
  + projects or sites with clearly and _simple_ api.
    all requests has human readable format like 'post /boxes/onebox/users/vasya'
  + relative simplicity, not too simple not too hard.

* How its work?
  request - create,'boxes/somebox/users/vasya/rights/coolgroup, { access : 'rws' }
  It's mean - grant 'readwriteexecute' access to user vasya for group coolgroup in 'boxes/somebox/users'
  Each part path is folder, resource or method(in OOP terminology).
  + boxes 
    folder
  + somebox
    box resource
  + users
    folder
  + vasya
    user resource
  + rights
    folder

  Folders and resources is objects, implementing the objects you implement the processing of requests. 
  Each object just doing only own job:
  + box 
    consist other resources
  + users
    consist users
  + vasya
    user resource, consist profile and etc

  Each object implements access rights. Its work just like filesystem rights. If you own read right, you
  can read resource own or consisted resources

* service example
  Simple service for storing and retriving notes

* Project consist from these things:
  + nodejs modules for creating CRUID services
  + nodejs modules to wrap CRUID services and to expose as http REST services or services over sockets
  + client library for browser and nodejs to make multiple requests easier. Its work for HTTP REST, sockets,
    local access and any HTTP site
